// Firestore Security Rules for TPN Medical Application
// Optimized for medical data integrity and security
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================
    // Helper Functions
    // ========================
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function hasRole(role) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny([role]);
    }
    
    function isValidTimestamp(field) {
      return request.resource.data[field] == request.time;
    }
    
    function isValidMedicalData() {
      // Basic medical data validation
      return request.resource.data.name is string &&
             request.resource.data.name.size() > 0 &&
             request.resource.data.name.size() <= 200;
    }
    
    function hasValidMetadata() {
      return request.resource.data.keys().hasAll(['lastModified', 'modifiedBy']) &&
             request.resource.data.lastModified == request.time &&
             request.resource.data.modifiedBy == request.auth.uid;
    }
    
    // Rate limiting helper (basic implementation)
    function rateLimit() {
      // Allow up to 100 writes per minute per user
      // This would need server-side implementation for full effectiveness
      return true; // Simplified for now
    }
    
    // ========================
    // User Management
    // ========================
    
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) &&
        isValidTimestamp('createdAt') &&
        hasValidMetadata();
      allow update: if isOwner(userId) &&
        hasValidMetadata() &&
        // Prevent modification of critical fields
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['createdAt', 'createdBy']);
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // ========================
    // TPN Ingredients
    // ========================
    
    match /ingredients/{ingredientId} {
      allow read: if isSignedIn();
      
      allow create: if isSignedIn() &&
        isValidMedicalData() &&
        hasValidMetadata() &&
        isValidTimestamp('createdAt') &&
        request.resource.data.createdBy == request.auth.uid &&
        rateLimit();
      
      allow update: if isSignedIn() &&
        isValidMedicalData() &&
        hasValidMetadata() &&
        // Preserve creation metadata
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['createdAt', 'createdBy']) &&
        // Ensure version is incremented
        request.resource.data.version > resource.data.version &&
        rateLimit();
      
      allow delete: if isAdmin(); // Only admins can delete ingredients
      
      // ========================
      // Ingredient References (Nested)
      // ========================
      
      match /references/{referenceId} {
        allow read: if isSignedIn();
        
        allow create: if isSignedIn() &&
          hasValidMetadata() &&
          isValidTimestamp('createdAt') &&
          request.resource.data.createdBy == request.auth.uid &&
          // Validate required medical fields
          request.resource.data.keys().hasAll(['name', 'healthSystem', 'populationType']) &&
          request.resource.data.populationType in ['neonatal', 'child', 'pediatric', 'adolescent', 'adult'] &&
          rateLimit();
        
        allow update: if isSignedIn() &&
          hasValidMetadata() &&
          // Preserve creation metadata
          !request.resource.data.diff(resource.data).affectedKeys().hasAny(['createdAt', 'createdBy']) &&
          // Ensure version is incremented
          request.resource.data.version > resource.data.version &&
          rateLimit();
        
        allow delete: if isSignedIn() && (
          resource.data.createdBy == request.auth.uid ||
          isAdmin()
        );
        
        // Reference version history
        match /versions/{versionId} {
          allow read: if isSignedIn();
          allow create: if isSignedIn(); // System creates these automatically
          allow update, delete: if false; // Versions are immutable
        }
      }
      
      // Ingredient version history
      match /versions/{versionId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn(); // System creates these automatically
        allow update, delete: if false; // Versions are immutable
      }
    }
    
    // ========================
    // Imported Configurations
    // ========================
    
    match /importedConfigs/{configId} {
      allow read: if isSignedIn();
      
      allow create: if isSignedIn() &&
        hasValidMetadata() &&
        isValidTimestamp('importedAt') &&
        request.resource.data.importedBy == request.auth.uid &&
        // Validate config metadata
        request.resource.data.keys().hasAll(['name', 'healthSystem']) &&
        rateLimit();
      
      allow update: if isSignedIn() &&
        hasValidMetadata() &&
        // Only allow updates to non-critical fields
        !request.resource.data.diff(resource.data).affectedKeys().hasAny([
          'importedAt', 'importedBy', 'baselineId'
        ]) &&
        rateLimit();
      
      allow delete: if isSignedIn() && (
        resource.data.importedBy == request.auth.uid ||
        isAdmin()
      );
      
      // Config ingredients subcollection
      match /ingredients/{ingredientDocId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn(); // Created during import
        allow update, delete: if isAdmin(); // Only admins can modify imported data
      }
    }
    
    // ========================
    // Baseline Configurations (Immutable)
    // ========================
    
    match /baselineConfigs/{configId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
        request.resource.data.isBaseline == true &&
        hasValidMetadata();
      allow update, delete: if false; // Baselines are completely immutable
      
      // Baseline ingredients subcollection
      match /ingredients/{ingredientDocId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn(); // Created during import
        allow update, delete: if false; // Immutable baseline data
      }
    }
    
    // ========================
    // Shared Ingredients
    // ========================
    
    match /sharedIngredients/{sharedId} {
      allow read: if isSignedIn();
      
      allow create: if isSignedIn() &&
        hasValidMetadata() &&
        isValidTimestamp('createdAt') &&
        request.resource.data.createdBy == request.auth.uid &&
        // Validate content hash is provided
        request.resource.data.contentHash is string &&
        rateLimit();
      
      allow update: if isSignedIn() &&
        hasValidMetadata() &&
        // Only allow incrementing reference count and metadata updates
        !request.resource.data.diff(resource.data).affectedKeys().hasAny([
          'createdAt', 'createdBy', 'contentHash', 'masterReferenceId'
        ]) &&
        rateLimit();
      
      allow delete: if isAdmin(); // Only admins can delete shared ingredients
    }
    
    // ========================
    // Audit Log (Write-only for users, read for admins)
    // ========================
    
    match /auditLog/{logId} {
      allow read: if isAdmin();
      allow create: if isSignedIn() &&
        request.resource.data.userId == request.auth.uid &&
        isValidTimestamp('timestamp');
      allow update, delete: if false; // Audit logs are immutable
    }
    
    // ========================
    // Health Systems and Domains
    // ========================
    
    match /healthSystems/{systemId} {
      allow read: if isSignedIn();
      allow create, update: if hasRole('admin') || hasRole('system-manager');
      allow delete: if isAdmin();
      
      match /domains/{domainId} {
        allow read: if isSignedIn();
        allow create, update: if hasRole('admin') || hasRole('system-manager');
        allow delete: if isAdmin();
      }
    }
    
    // ========================
    // Rate Limiting Data (System-managed)
    // ========================
    
    match /rateLimits/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create, update: if false; // System-managed only
      allow delete: if isAdmin();
    }
    
    // ========================
    // System Health and Metrics (Admin-only)
    // ========================
    
    match /systemHealth/{document=**} {
      allow read, write: if isAdmin();
    }
    
    match /metrics/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // ========================
    // Default Deny
    // ========================
    
    // Explicitly deny access to any other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}