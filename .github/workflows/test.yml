name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-unit:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Type check
      run: pnpm typecheck
      
    - name: Run unit tests
      run: pnpm test:unit
      
    - name: Generate coverage report
      run: pnpm test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml
          
  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Install Playwright browsers
      run: pnpm exec playwright install --with-deps
      
    - name: Build application
      run: pnpm build
      
    - name: Run E2E tests
      run: pnpm test:e2e
      env:
        # Set base URL for E2E tests
        BASE_URL: http://localhost:5173
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/
          
  test-medical-safety:
    name: Medical Safety & Calculation Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run TPN calculation tests
      run: pnpm test:unit --testNamePattern="TPN.*[Cc]alculation" --verbose
      
    - name: Run medical safety validation tests  
      run: pnpm test:unit --testNamePattern="Medical.*Safety|Safety.*Validation" --verbose
      
    - name: Generate medical safety report
      run: |
        echo "# Medical Safety Test Report" > medical-safety-report.md
        echo "Generated on: $(date)" >> medical-safety-report.md
        echo "" >> medical-safety-report.md
        echo "## TPN Calculation Tests" >> medical-safety-report.md
        pnpm test:unit --testNamePattern="TPN.*[Cc]alculation" --reporter=verbose >> medical-safety-report.md || true
        echo "" >> medical-safety-report.md
        echo "## Medical Safety Validations" >> medical-safety-report.md  
        pnpm test:unit --testNamePattern="Medical.*Safety" --reporter=verbose >> medical-safety-report.md || true
        
    - name: Upload medical safety report
      uses: actions/upload-artifact@v4
      with:
        name: medical-safety-report
        path: medical-safety-report.md
        
  test-cross-browser:
    name: Cross-Browser E2E Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Install Playwright browsers
      run: pnpm exec playwright install --with-deps ${{ matrix.browser }}
      
    - name: Build application
      run: pnpm build
      
    - name: Run E2E tests on ${{ matrix.browser }}
      run: pnpm exec playwright test --project=${{ matrix.browser }}
      env:
        BASE_URL: http://localhost:5173
        
    - name: Upload ${{ matrix.browser }} test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.browser }}-test-results
        path: |
          test-results/
          playwright-report/
          
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run security audit
      run: pnpm audit --audit-level moderate
      
    - name: Run dependency vulnerability scan
      run: |
        # Check for known vulnerabilities in dependencies
        npx audit-ci --config .audit-ci.json || true
        
  build-test:
    name: Build & Bundle Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build for production
      run: pnpm build
      
    - name: Verify build output
      run: |
        # Check that essential files are built
        test -f dist/index.html
        test -d dist/assets
        echo "Build verification passed"
        
    - name: Test production build
      run: |
        # Start production preview and test it responds
        pnpm preview &
        sleep 5
        curl -f http://localhost:4173 || exit 1
        echo "Production build test passed"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
  test-quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e, test-medical-safety]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: '*-test-results*'
        merge-multiple: true
        path: ./test-artifacts/
        
    - name: Generate quality report
      run: |
        echo "# Quality Gates Report" > quality-report.md
        echo "Generated on: $(date)" >> quality-report.md
        echo "Commit: ${{ github.sha }}" >> quality-report.md
        echo "" >> quality-report.md
        
        # Check coverage threshold
        if [ -f "./test-artifacts/coverage/coverage-summary.json" ]; then
          echo "## Test Coverage" >> quality-report.md
          node -e "
            const coverage = require('./test-artifacts/coverage/coverage-summary.json');
            const total = coverage.total;
            console.log('Lines:', total.lines.pct + '%');
            console.log('Functions:', total.functions.pct + '%');
            console.log('Branches:', total.branches.pct + '%');
            console.log('Statements:', total.statements.pct + '%');
            
            const threshold = 75;
            const allAboveThreshold = 
              total.lines.pct >= threshold &&
              total.functions.pct >= threshold &&
              total.branches.pct >= threshold &&
              total.statements.pct >= threshold;
            
            if (allAboveThreshold) {
              console.log('✅ Coverage threshold met');
              process.exit(0);
            } else {
              console.log('❌ Coverage below threshold (' + threshold + '%)');
              process.exit(1);
            }
          " >> quality-report.md
        fi
        
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-gates-report
        path: quality-report.md
        
  # Final status check
  test-status:
    name: Test Status
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e, test-medical-safety, test-cross-browser, security-scan, build-test, test-quality-gates]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Unit Tests: ${{ needs.test-unit.result }}"
        echo "E2E Tests: ${{ needs.test-e2e.result }}"
        echo "Medical Safety Tests: ${{ needs.test-medical-safety.result }}"
        echo "Cross-Browser Tests: ${{ needs.test-cross-browser.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Build Test: ${{ needs.build-test.result }}"
        echo "Quality Gates: ${{ needs.test-quality-gates.result }}"
        
        if [ "${{ needs.test-unit.result }}" != "success" ] || 
           [ "${{ needs.test-e2e.result }}" != "success" ] || 
           [ "${{ needs.test-medical-safety.result }}" != "success" ]; then
          echo "❌ Critical tests failed"
          exit 1
        fi
        
        echo "✅ All critical tests passed"
        
    - name: Update status check
      if: github.event_name == 'pull_request'
      run: |
        # This would integrate with GitHub status API or PR comments
        echo "Tests completed successfully for PR #${{ github.event.number }}"
        
  # Notify on failure (production only)
  notify-failure:
    name: Notify Test Failure
    runs-on: ubuntu-latest
    needs: [test-status]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Send notification
      run: |
        # In a real environment, this would send to Slack, email, or other notification system
        echo "🚨 Critical test failure on main branch"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Please review and fix immediately"
