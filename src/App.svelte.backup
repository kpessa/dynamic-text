<script>
  import * as Babel from '@babel/standalone';
  import DOMPurify from 'dompurify';
  import CodeEditor from './lib/CodeEditor.svelte';
  import Sidebar from './lib/Sidebar.svelte';
  import TPNTestPanel from './lib/TPNTestPanel.svelte';
  import TPNKeyReference from './lib/TPNKeyReference.svelte';
  import IngredientInputPanel from './lib/IngredientInputPanel.svelte';
  
  import AIWorkflowInspector from './lib/AIWorkflowInspector.svelte';
  import Navbar from './lib/Navbar.svelte';
  import IngredientManager from './lib/IngredientManager.svelte';
  import IngredientDiffViewer from './lib/IngredientDiffViewer.svelte';
  import DataMigrationTool from './lib/DataMigrationTool.svelte';
  import ValidationStatus from './lib/ValidationStatus.svelte';
  import SelectiveApply from './lib/SelectiveApply.svelte';
  import PreferencesModal from './lib/PreferencesModal.svelte';
  import SectionManager from './lib/components/SectionManager.svelte';
  import PreviewEngine from './lib/components/PreviewEngine.svelte';
  import FirebaseSync from './lib/components/FirebaseSync.svelte';
  import ImportExportManager from './lib/components/ImportExportManager.svelte';
  import ModalManager from './lib/components/ModalManager.svelte';
  import EditorPanel from './lib/components/EditorPanel.svelte';
  import PreviewPanel from './lib/components/PreviewPanel.svelte';
  import { TPNLegacySupport, LegacyElementWrapper, extractKeysFromCode, extractDirectKeysFromCode, isValidKey, getKeyCategory, isCalculatedValue, getCanonicalKey } from './lib/tpnLegacy.js';
  import { POPULATION_TYPES } from './lib/firebaseDataService.js';
  import { workContext } from './stores/workContextStore.js';
  import { validation } from './stores/validationStore.js';
  import { uiState } from './stores/uiStateStore.js';
  import { referencedIngredients, ingredientsBySection } from './stores/ingredientStore.js';
  
  let showSidebar = $state(false);
  let sections = $state([]);
  
  // Component references
  let sectionManagerRef = $state(null);
  let previewEngineRef = $state(null);
  let importExportManagerRef = $state(null);
  let copied = $state(false);
  let showOutput = $state(false);
  let previewMode = $state('preview'); // 'preview' or 'output'
  
  
  
  
  
  
  
  
  
  // Active config state
  let activeConfigId = $state(null);
  let activeConfigIngredients = $state([]);
  
  
  
  
  
  
  // Sanitize HTML to prevent XSS
  // Preview functions now delegated to PreviewEngine component
  function sanitizeHTML(html) {
    if (previewEngineRef) {
      return previewEngineRef.sanitizeHTML(html);
    }
    return html;
  }
  
  
  
  
  
  
  
  // Generate preview HTML combining all sections
  let previewHTML = $derived.by(() => {
    // Access currentIngredientValues to create a dependency
    const ingredientVals = { ...$workContext.currentIngredientValues };
    
    return sections.map(section => {
      if (section.type === 'static') {
        // Replace newlines with <br> for proper line break rendering
        return sanitizeHTML(section.content.replace(/\n/g, '<br>'));
      } else if (section.type === 'dynamic') {
        const testCase = $workContext.activeTestCase[section.id];
        const evaluated = previewEngineRef?.evaluateCode(section.content, testCase?.variables);
        // Also handle line breaks in dynamic content
        const evalString = evaluated || '';
        return sanitizeHTML(evalString.replace(/\n/g, '<br>'));
      }
      return '';
    }).join('<br>');
  });
  
  
  
  // Helper to set sections - delegates to SectionManager component
  function setSections(newSections) {
    // Ensure dynamic sections have testCases for backward compatibility
    const migratedSections = newSections.map(section => {
      // If it's a dynamic section without testCases, add a default one
      if (section.type === 'dynamic' && !section.testCases) {
        return {
          ...section,
          testCases: [{ name: 'Default', variables: {} }]
        };
      }
      return section;
    });
    
    sections = migratedSections;
    
    // Update SectionManager component
    if (sectionManagerRef) {
      sectionManagerRef.publicSetSections(migratedSections);
    }
  }

  // Clear editor for new work
  function clearEditor() {
    setSections([]);
    $workContext = {
      ...$workContext,
      currentIngredient: '',
      currentReferenceName: '',
      hasUnsavedChanges: false,
      lastSavedTime: null,
      loadedReferenceId: null,
      originalSections: null,
      activeTestCase: {},
      expandedTestCases: {},
    };
  }
  
  // Section management - delegates to SectionManager component
  function handleSectionsChange(newSections) {
    sections = newSections;
    checkForChanges();
  }
  
  function handleSectionAdded(e) {
    const section = e.detail.section;
    if (section.type === 'dynamic') {
      $workContext.activeTestCase[section.id] = section.testCases?.[0] || { name: 'Default', variables: {} };
    }
  }
  
  function handleSectionDeleted(e) {
    const id = e.detail.id;
    delete $workContext.activeTestCase[id];
    delete $workContext.expandedTestCases[id];
  }
  
  function handleEditSection(sectionId) {
    $workContext.editingSection = sectionId;
  }
  
  // Wrapper functions for template calls
  function addSection(type) {
    if (sectionManagerRef) {
      sectionManagerRef.publicAddSection(type);
    }
  }
  
  function deleteSection(id) {
    if (sectionManagerRef) {
      sectionManagerRef.publicDeleteSection(id);
    }
  }
  
  function updateSectionContent(id, content) {
    if (sectionManagerRef) {
      sectionManagerRef.publicUpdateSectionContent(id, content);
    }
  }
  
  function handleConvertToDynamic(sectionId, content) {
    if (sectionManagerRef) {
      sectionManagerRef.publicConvertToDynamic(sectionId, content);
    }
  }
  
  // Check if content has changed from original
  function checkForChanges() {
    if ($workContext.originalSections) {
      const currentSectionsStr = JSON.stringify(sections);
      $workContext.hasUnsavedChanges = currentSectionsStr !== $workContext.originalSections;
    } else {
      // If no original sections, we have unsaved changes if there's any content
      $workContext.hasUnsavedChanges = sections.length > 0;
    }
  }
  
  
  
  // Drag and drop for sections
  // Drag and drop now handled by SectionManager component
  
  
  
  // Sidebar handlers
  function handleLoadReference(reference, ingredient = null) {
    if (reference && reference.sections) {
      setSections(reference.sections);
      // Update work context
      $workContext.currentIngredient = reference.ingredient || '';
      $workContext.currentReferenceName = reference.name || '';
      $workContext.loadedReferenceId = reference.id || null;
      $workContext.hasUnsavedChanges = false;
      $workContext.lastSavedTime = reference.updatedAt || null;
      // Store original sections for comparison
      $workContext.originalSections = JSON.stringify(reference.sections);
      
      // Set loadedIngredient if provided
      if (ingredient) {
        $workContext.loadedIngredient = {
          id: ingredient.KEYNAME || ingredient.keyname,
          name: ingredient.KEYNAME || ingredient.keyname,
          display: ingredient.DISPLAY || ingredient.display,
          type: ingredient.TYPE || ingredient.type,
          unit: ingredient.Unit || ingredient.unit
        };
      }
    }
  }
  
  function handleSaveReference() {
    // The sidebar will handle the actual saving
    // Just return the current sections
    return sections;
  }
  
  // Handle config activation from sidebar
  function handleConfigActivate(configId, ingredients) {
    activeConfigId = configId;
    activeConfigIngredients = ingredients || [];
    console.log(`Config activated: ${configId} with ${activeConfigIngredients.length} ingredients`);
  }
  
  // Handle TPN value changes
  function handleTPNValuesChange(tpnInstance) {
    currentTPNInstance = tpnInstance;
  }
  
  // Filter only dynamic sections for TPN panel
  let dynamicSections = $derived(sections.filter(s => s.type === 'dynamic'));
  
  // Handle key insert from reference panel
  function handleKeyInsert(key) {
    // Insert me.getValue('key') at cursor position in active editor
    const snippet = `me.getValue('${key}')`;
    // For now, just copy to clipboard
    navigator.clipboard.writeText(snippet).then(() => {
      // Could show a toast notification here
      console.log(`Copied: ${snippet}`);
    });
  }
  
  // Handle ingredient value changes from input panel
  function handleIngredientChange(key, value) {
    // Create a new object to ensure reactivity in Svelte 5
    currentIngredientValues = { ...currentIngredientValues, [key]: value };
  }
  

  
  
  // Handlers for new components
  function handleIngredientSelection(ingredient) {
    console.log('App: handleIngredientSelection called', {
      ingredient: ingredient.name,
      action: 'Opening diff viewer'
    });
    selectedIngredientForDiff = ingredient;
    showDiffViewer = true;
  }
  
  function handleCreateReference(ingredient, populationType) {
    // Set up for creating a new reference
    $workContext.currentIngredient = ingredient.name;
    $workContext.currentPopulationType = populationType;
    $workContext.currentReferenceName = `${ingredient.name} - ${populationType}`;
    setSections([]);
    addSection('static');
    $uiState.showIngredientManager = false;
    
    // Store ingredient details for context display
    $workContext.loadedIngredient = ingredient;
    $workContext.loadedReference = {
      name: $workContext.currentReferenceName,
      populationType: populationType,
      healthSystem: null, // Will be set when saving
      version: null
    };
    $workContext.currentHealthSystem = null;
    $workContext.loadedReferenceId = null;
    $workContext.hasUnsavedChanges = false;
    $workContext.originalSections = '[]';
  }
  
  // Save current work with commit message
  async function saveCurrentWork(commitMessage = null) {
    if (firebaseSyncRef) {
      await firebaseSyncRef.saveReference(commitMessage);
    }
  }

  // Handle save with commit message dialog
  function handleSaveWithCommit() {
    if (!$workContext.hasUnsavedChanges) {
      return;
    }
    $uiState.showCommitMessageDialog = true;
  }

  // Handle commit message confirmation
  function handleCommitMessageConfirm(commitMessage) {
    saveCurrentWork(commitMessage);
    $uiState.showCommitMessageDialog = false;
  }
  
  // Handle keyboard shortcuts
  function handleKeyDown(e) {
    // Ctrl+S or Cmd+S to save
    if ((e.ctrlKey || e.metaKey) && e.key === 's') {
      e.preventDefault();
      if ($workContext.hasUnsavedChanges) {
        handleSaveWithCommit();
      }
    }
    
    // Ctrl+T or Cmd+T to run all tests
    if ((e.ctrlKey || e.metaKey) && e.key === 't') {
      e.preventDefault();
      runAllTests();
    }
    
    // Ctrl+Shift+T or Cmd+Shift+T to run current section's tests
    if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {
      e.preventDefault();
      // Find the currently active or focused section
      const activeSectionId = Object.keys($workContext.activeTestCase)[0];
      if (activeSectionId) {
        runSectionTests(activeSectionId);
      }
    }
    
    // Escape to close test summary modal
    if (e.key === 'Escape' && $uiState.showTestSummary) {
      $uiState.showTestSummary = false;
    }
  }
  
  function handleEditReference(ingredient, reference) {
    console.log('App: handleEditReference called', {
      ingredient: ingredient.name,
      reference: reference?.name,
      hasSections: !!(reference?.sections),
      fullReference: reference
    });
    
    // Load the reference for editing
    if (reference) {
      // Check if sections exist and have content
      if (!reference.sections || reference.sections.length === 0) {
        console.warn('Reference has empty sections! User needs to run "Fix Empty Sections" in Ingredient Manager.');
        // Show a warning to the user
        alert(`This reference has no content sections. Please run "Fix Empty Sections" in the Ingredient Manager to populate the clinical notes.`);
        return;
      }
      
      setSections(reference.sections);
      $workContext.currentIngredient = ingredient.name;
      $workContext.currentReferenceName = reference.name;
      $workContext.currentPopulationType = reference.populationType;
      $workContext.loadedReferenceId = reference.id;
      $workContext.hasUnsavedChanges = false;
      $workContext.lastSavedTime = reference.updatedAt;
      $workContext.originalSections = JSON.stringify(reference.sections);
      
      // Load validation data
      $validation.currentValidationStatus = reference.validationStatus || 'untested';
      $validation.currentValidationNotes = reference.validationNotes || '';
      $validation.currentValidatedBy = reference.validatedBy || null;
      $validation.currentValidatedAt = reference.validatedAt || null;
      $validation.currentTestResults = reference.testResults || null;
      
      // Close all other views to ensure Dynamic Text Editor is visible
      $uiState.showIngredientManager = false;
      // Don't close diff viewer - allow it to stay open for comparison
      $uiState.showMigrationTool = false;
      $uiState.showAIWorkflowInspector = false;
      $uiState.showTestGeneratorModal = false;
      $uiState.showSidebar = false;
      
      // Ensure preview panel is visible
      $workContext.previewCollapsed = false;
      $uiState.previewMode = 'preview';
      
      // Store full ingredient and reference details
      $workContext.loadedIngredient = ingredient;
      $workContext.loadedReference = reference;
      $workContext.currentHealthSystem = reference.healthSystem;
      
      console.log('App: Reference loaded successfully', {
        sectionsCount: sections.length,
        viewsClosed: true,
        previewVisible: !$workContext.previewCollapsed
      });
      
      // Scroll to top of the editor to show the loaded content
      // Also flash a visual indicator
      setTimeout(() => {
        const editorElement = document.querySelector('.editor');
        if (editorElement) {
          editorElement.scrollTop = 0;
          // Add a brief highlight animation
          editorElement.style.transition = 'background-color 0.3s ease';
          editorElement.style.backgroundColor = '#e8f4fd';
          setTimeout(() => {
            editorElement.style.backgroundColor = '';
          }, 300);
        }
      }, 100);
    }
  }
  
  function handleMigrationComplete(result) {
    $uiState.showMigrationTool = false;
    // Optionally refresh the ingredient manager
    if ($uiState.showIngredientManager) {
      // The manager will auto-refresh due to Firebase listeners
    }
  }
  
  
  
</script>

<div class="app-container {$uiState.showSidebar ? 'sidebar-open' : ''}" onkeydown={handleKeyDown}>
  {#if $uiState.showSidebar}
    <Sidebar 
      onLoadReference={handleLoadReference}
      onSaveReference={handleSaveReference}
      onConfigActivate={handleConfigActivate}
      currentSections={sections}
      activeConfigId={activeConfigId}
      activeConfigIngredients={activeConfigIngredients}
    />
  {/if}
  
  <main>
    <Navbar
      bind:showSidebar={$uiState.showSidebar}
      bind:tpnMode={$workContext.tpnMode}
      bind:showOutput={$uiState.showOutput}
      bind:outputMode={$uiState.previewMode}      bind:showKeyReference={$workContext.showKeyReference}
      currentReferenceName={$workContext.currentReferenceName}
      currentIngredient={$workContext.currentIngredient}
      hasUnsavedChanges={$workContext.hasUnsavedChanges}
      lastSavedTime={$workContext.lastSavedTime}
      firebaseEnabled={true}
      onSave={handleSaveWithCommit}
      onNewDocument={() => {
        if ($workContext.hasUnsavedChanges && !confirm('You have unsaved changes. Start new anyway?')) {
          return;
        }
        clearEditor();
      }}
      onExport={() => {
        if (importExportManagerRef) {
          importExportManagerRef.openExportModal();
        }
      }}
      onOpenIngredientManager={() => $uiState.showIngredientManager = true}
      onOpenMigrationTool={() => $uiState.showMigrationTool = true}
      onOpenPreferences={() => $uiState.showPreferences = true}
      onOpenDiffViewer={async () => {
        console.log('Compare button clicked', { loadedIngredient: $workContext.loadedIngredient, showIngredientManager: $uiState.showIngredientManager, showDiffViewer: $uiState.showDiffViewer });
        
        // Make sure to close ingredient manager if it's open
        $uiState.showIngredientManager = false;
        
        if ($workContext.loadedIngredient) {
          // If we don't have a proper Firebase ID, try to find the ingredient
          if (!$workContext.loadedIngredient.id || $workContext.loadedIngredient.id === $workContext.loadedIngredient.name) {
            try {
              // Import the ingredient service to search for the ingredient
              const { ingredientService } = await import('./lib/firebaseDataService.js');
              const ingredients = await ingredientService.getAllIngredients();
              
              // Find the ingredient by name
              const foundIngredient = ingredients.find(ing => 
                ing.name === $workContext.loadedIngredient.name || 
                ing.name === $workContext.loadedIngredient.id
              );
              
              if (foundIngredient) {
                console.log('Found ingredient:', foundIngredient);
                $uiState.selectedIngredientForDiff = foundIngredient;
                $uiState.showDiffViewer = true;
                $uiState.showIngredientManager = false; // Ensure it's closed
              } else {
                alert(`Cannot find ingredient "${$workContext.loadedIngredient.name}" in Firebase. Make sure it has been properly imported.`);
              }
            } catch (error) {
              console.error('Error finding ingredient:', error);
              alert('Error loading ingredient data. Please try again.');
            }
          } else {
            // We already have a proper ingredient object
            console.log('Using existing ingredient:', $workContext.loadedIngredient);
            $uiState.selectedIngredientForDiff = $workContext.loadedIngredient;
            $uiState.showDiffViewer = true;
            $uiState.showIngredientManager = false; // Ensure it's closed
          }
        }
      }}
      copied={copied}
    />
    
    <div class="editor-container {$workContext.previewCollapsed ? 'preview-collapsed' : ''}">
    <div class="editor-panel">
      <div class="panel-header">
        <h2>Content Sections</h2>
        <div class="header-controls">
          
          <div class="add-section-buttons">
            <button class="add-btn" onclick={() => addSection('static')}>
              + Static HTML
            </button>
            <button class="add-btn" onclick={() => addSection('dynamic')}>
              + Dynamic JS
            </button>
          </div>
        </div>
      </div>
      
      {#if $workContext.loadedIngredient && $workContext.loadedReference}
        <div class="ingredient-context-bar">
          <span class="context-label">Editing:</span>
          <button 
            class="ingredient-pill"
            onclick={() => $uiState.showIngredientManager = true}
            title="Click to open ingredient manager"
          >
            📦 {$workContext.loadedIngredient.name}
          </button>
          <span class="context-separator">→</span>
          <button 
            class="population-pill clickable"
            style="background-color: {firebaseSyncRef?.getPopulationColor($workContext.currentPopulationType)}"
            onclick={() => firebaseSyncRef?.handlePopulationClick()}
            disabled={!firebaseSyncRef}
            title="Click to switch population type"
          >
            {firebaseSyncRef?.getPopulationName($workContext.currentPopulationType)}
            <span class="dropdown-indicator">▼</span>
          </button>
          
          {#if $uiState.showPopulationDropdown}
            <div class="population-dropdown-backdrop" onclick={() => $uiState.showPopulationDropdown = false}></div>
            <div class="population-dropdown">
              <div class="dropdown-header">Switch Population Type</div>
              {#if availablePopulations.length === 0}
                <div class="dropdown-empty">No other population types available</div>
              {:else}
                {#each availablePopulations as popOption}
                  <div class="population-option {popOption.isActive ? 'active' : ''}">
                    <div 
                      class="population-option-header"
                      style="border-left-color: {firebaseSyncRef?.getPopulationColor(popOption.populationType)}"
                    >
                      <span class="population-name">{firebaseSyncRef?.getPopulationName(popOption.populationType)}</span>
                      {#if popOption.isActive}
                        <span class="active-badge">Current</span>
                      {/if}
                    </div>
                    {#if popOption.references.length > 0}
                      <div class="reference-list">
                        {#each popOption.references as ref}
                          <button 
                            class="reference-option"
                            onclick={() => firebaseSyncRef?.switchToPopulation(popOption.populationType, ref)}
                            disabled={popOption.isActive && ref.id === $workContext.loadedReferenceId}
                          >
                            <span class="ref-health-system">🏥 {ref.healthSystem}</span>
                            {#if ref.version}
                              <span class="ref-version">v{ref.version}</span>
                            {/if}
                          </button>
                        {/each}
                      </div>
                    {/if}
                  </div>
                {/each}
              {/if}
            </div>
          {/if}
          {#if $workContext.currentHealthSystem}
            <span class="context-separator">→</span>
            <span class="health-system-pill">
              🏥 {$workContext.currentHealthSystem}
            </span>
          {/if}
          {#if $workContext.loadedReference.version}
            <span class="version-badge">v{$workContext.loadedReference.version}</span>
          {/if}
        </div>
        
        <!-- Validation Status Section -->
        <div class="validation-section">
          <ValidationStatus 
            status={$validation.currentValidationStatus}
            validatedBy={$validation.currentValidatedBy}
            validatedAt={$validation.currentValidatedAt}
            testResults={$validation.currentTestResults}
            notes={$validation.currentValidationNotes}
            compact={false}
            onUpdate={(validationData) => {
              $validation.currentValidationStatus = validationData.status;
              $validation.currentValidationNotes = validationData.notes;
              $validation.currentValidatedBy = validationData.validatedBy;
              $validation.currentValidatedAt = validationData.validatedAt;
              $workContext.hasUnsavedChanges = true;
            }}
          />
        </div>
      {/if}
      
      <div class="sections" role="list">
        {#if sections.length === 0}
          <div class="empty-state">
            <div class="empty-state-icon">📄</div>
            <h3 class="empty-state-title">Start Creating Your Reference Text</h3>
            <p class="empty-state-description">
              Add sections to build your dynamic text content
            </p>
            <div class="empty-state-actions">
              <button class="empty-state-btn static" onclick={() => addSection('static')}>
                <span class="btn-icon">📝</span>
                <span class="btn-label">Add Static HTML</span>
                <span class="btn-hint">For fixed content and formatting</span>
              </button>
              <button class="empty-state-btn dynamic" onclick={() => addSection('dynamic')}>
                <span class="btn-icon">⚡</span>
                <span class="btn-label">Add Dynamic JavaScript</span>
                <span class="btn-hint">For calculations and logic</span>
              </button>
            </div>
          </div>
        {:else}
          {#each sections as section (section.id)}
            <div 
              class="section {draggedSection?.id === section.id ? 'dragging' : ''}"
              role="listitem"
              draggable="true"
              ondragstart={(e) => handleSectionDragStart(e, section)}
              ondragover={handleSectionDragOver}
              ondrop={(e) => handleSectionDrop(e, section)}
              ondragend={handleSectionDragEnd}
            >
            <div class="section-header">
              <span class="drag-handle">≡</span>
              <span class="section-type {section.type}">
                {section.type === 'static' ? '📝 HTML' : '⚡ JavaScript'}
              </span>
              
              {#if section.type === 'dynamic' && $ingredientsBySection[section.id]}
                <div class="ingredient-badges">
                  {#each $ingredientsBySection[section.id].tpnKeys as key}
                    <span 
                      class="ingredient-badge tpn-badge" 
                      style="background-color: {getIngredientBadgeColor(key)}"
                      title="TPN: {key}"
                    >
                      {key}
                    </span>
                  {/each}
                  {#each $ingredientsBySection[section.id].calculatedKeys as key}
                    <span 
                      class="ingredient-badge calculated-badge" 
                      style="background-color: {getIngredientBadgeColor(key)}"
                      title="Calculated: {key}"
                    >
                      {key} 📊
                    </span>
                  {/each}
                  {#each $ingredientsBySection[section.id].customKeys as key}
                    <span 
                      class="ingredient-badge custom-badge"
                      title="Custom: {key}"
                    >
                      {key}
                    </span>
                  {/each}
                  {#if $ingredientsBySection[section.id].allKeys.length > 0}
                    <span class="ingredient-count">
                      {$ingredientsBySection[section.id].allKeys.length} vars
                    </span>
                  {/if}
                </div>
              {/if}
              
              <button 
                class="delete-section-btn"
                onclick={() => deleteSection(section.id)}
                title="Delete section"
              >
                ×
              </button>
            </div>
            
            {#if $workContext.editingSection === section.id}
              <div class="editor-wrapper">
                <CodeEditor
                  value={section.content}
                  language={section.type === 'static' ? 'html' : 'javascript'}
                  onChange={(content) => updateSectionContent(section.id, content)}
                  on:convertToDynamic={(e) => handleConvertToDynamic(section.id, e.detail.content)}
                />
                <button 
                  class="done-editing-btn"
                  onclick={() => $workContext.editingSection = null}
                >
                  Done Editing
                </button>
              </div>
            {:else}
              <div 
                class="content-preview"
                ondblclick={() => $workContext.editingSection = section.id}
                onkeydown={(e) => e.key === 'Enter' && ($workContext.editingSection = section.id)}
                role="button"
                tabindex="0"
                title="Double-click to edit"
              >
                <pre>{section.content}</pre>
              </div>
            {/if}
            
            
          </div>
        {/each}
        {/if}
      </div>
    </div>
    
    <div class="preview-panel">
      <div class="panel-header preview-header">
        {#if !$workContext.previewCollapsed}
          <div class="preview-header-content">
            <div class="view-tabs">
              <button 
                class="view-tab {$uiState.previewMode === 'preview' ? 'active' : ''}"
                onclick={() => $uiState.previewMode = 'preview'}
              >
                👁️ Preview
              </button>
              <button 
                class="view-tab {$uiState.previewMode === 'output' ? 'active' : ''}"
                onclick={() => {
                  $uiState.previewMode = 'output';
                  $uiState.showOutput = true;
                }}
              >
                📊 Output
              </button>
            </div>
            {#if $uiState.previewMode === 'output'}
              <div class="output-format-selector">
                <button 
                  class="format-btn {$uiState.outputMode === 'json' ? 'active' : ''}"
                  onclick={() => $uiState.outputMode = 'json'}
                >
                  JSON
                </button>
                <button 
                  class="format-btn {$uiState.outputMode === 'configurator' ? 'active' : ''}"
                  onclick={() => $uiState.outputMode = 'configurator'}
                >
                  Configurator
                </button>
              </div>
            {/if}
          </div>
        {/if}
        <button 
          class="preview-toggle"
          onclick={() => $workContext.previewCollapsed = !$workContext.previewCollapsed}
          title="{$workContext.previewCollapsed ? 'Show' : 'Hide'} Panel"
        >
          {$workContext.previewCollapsed ? '◀' : '▶'}
        </button>
      </div>
      
      {#if $referencedIngredients.length > 0 && !$workContext.tpnMode && $uiState.previewMode === 'preview'}
        <IngredientInputPanel 
          ingredients={$referencedIngredients}
          values={$workContext.currentIngredientValues}
          onChange={handleIngredientChange}
          tpnInstance={calculationTPNInstance}
        />
      {/if}
      
      {#if $uiState.previewMode === 'preview'}
        <div class="preview">
          {@html previewHTML}
        </div>
      
      {/if}
      
    </div>
  </div>
  
  {#if $workContext.tpnMode}
    <TPNTestPanel 
      {dynamicSections}
      onValuesChange={handleTPNValuesChange}
      activeTestCase={$workContext.activeTestCase}
      bind:isExpanded={$workContext.tpnPanelExpanded}
    />
  {/if}
  
  </main>
  
  
  
  {#if $workContext.tpnMode}
    <TPNKeyReference 
      bind:isExpanded={$workContext.showKeyReference}
      onKeySelect={handleKeyInsert}
    />
  {/if}
  
  <!-- Firebase components -->
  <FirebaseSync
    bind:this={firebaseSyncRef}
    bind:sections
    bind:currentIngredient={$workContext.currentIngredient}
    bind:currentReferenceName={$workContext.currentReferenceName}
    bind:loadedReferenceId={$workContext.loadedReferenceId}
    bind:currentPopulationType={$workContext.currentPopulationType}
    bind:currentHealthSystem={$workContext.currentHealthSystem}
    bind:hasUnsavedChanges={$workContext.hasUnsavedChanges}
    on:save-successful={(e) => {
      $workContext.hasUnsavedChanges = false;
      $workContext.lastSavedTime = e.detail.savedAt;
      $workContext.originalSections = JSON.stringify(sections);
    }}
    on:population-switched={(e) => {
      handleEditReference($workContext.currentIngredient, e.detail.reference);
    }}
    on:request-selective-apply={(e) => {
      $uiState.pendingReferenceData = e.detail.referenceData;
      $uiState.showSelectiveApply = true;
    }}
  />

  {#if $uiState.showIngredientManager}
    <div 
      class="modal-overlay" 
      onclick={() => $uiState.showIngredientManager = false}
      onkeydown={(e) => e.key === 'Escape' && ($uiState.showIngredientManager = false)}
      role="button"
      tabindex="-1"
      aria-label="Close modal overlay"
    >
      <div 
        class="modal-content large-modal" 
        onclick={(e) => e.stopPropagation()}
        onkeydown={(e) => e.stopPropagation()}
        role="dialog"
        aria-modal="true"
        aria-label="Ingredient Manager"
        tabindex="-1"
      >
        <button 
          class="modal-close"
          onclick={() => $uiState.showIngredientManager = false}
        >
          ×
        </button>
        <IngredientManager
          bind:currentIngredient={$workContext.currentIngredient}
          onSelectIngredient={handleIngredientSelection}
          onCreateReference={handleCreateReference}
          onEditReference={handleEditReference}
          activeConfigId={activeConfigId}
          activeConfigIngredients={activeConfigIngredients}
        />
      </div>
    </div>
  {/if}
  
  <!-- Ingredient Diff Viewer -->
  {#if $uiState.showDiffViewer && $uiState.selectedIngredientForDiff}
    <IngredientDiffViewer
      ingredient={$uiState.selectedIngredientForDiff}
      healthSystem={null}
      onClose={() => {
        $uiState.showDiffViewer = false;
        $uiState.selectedIngredientForDiff = null;
      }}
    />
  {/if}
  
  <!-- Data Migration Tool -->
  <DataMigrationTool
    bind:isOpen={$uiState.showMigrationTool}
    onMigrationComplete={handleMigrationComplete}
  />

  <ImportExportManager
    bind:this={importExportManagerRef}
    {sections}
    currentIngredient={$workContext.currentIngredient}
    currentReferenceName={$workContext.currentReferenceName}
    healthSystem={$workContext.currentHealthSystem}
    populationType={$workContext.currentPopulationType}
    showOutput={$uiState.showOutput}
    previewMode={$uiState.previewMode}
  />
  <!-- Commit Message Dialog -->
  <CommitMessageDialog
    bind:isOpen={$uiState.showCommitMessageDialog}
    onConfirm={handleCommitMessageConfirm}
    onCancel={() => $uiState.showCommitMessageDialog = false}
    title="Save Changes"
    defaultMessage=""
    showOptionalNote={true}
  />
  
  
  
  <!-- Selective Apply Modal -->
  {#if $uiState.showSelectiveApply && $workContext.loadedIngredient && $uiState.pendingReferenceData}
    <div class="modal-backdrop" onclick={() => $uiState.showSelectiveApply = false}>
      <div class="modal-content selective-apply-modal" onclick={(e) => e.stopPropagation()}>
        <div class="modal-header">
          <h2>Apply Changes to Shared Configurations</h2>
          <button class="close-btn" onclick={() => $uiState.showSelectiveApply = false}>✕</button>
        </div>
        <SelectiveApply 
          ingredientId={$workContext.loadedIngredient.id}
          referenceData={$uiState.pendingReferenceData}
          onApply={async (results) => {
            $uiState.showSelectiveApply = false;
            $workContext.hasUnsavedChanges = false;
            $workContext.lastSavedTime = new Date();
            $workContext.originalSections = JSON.stringify(sections);
            console.log('Changes applied to configurations:', results);
            alert(`Changes applied to ${results.filter(r => r.status === 'success').length} configurations successfully.`);
          }}
          onCancel={() => $uiState.showSelectiveApply = false}
        />
      </div>
    </div>
  {/if}
  
  <!-- Preferences Modal -->
  <PreferencesModal 
    isOpen={$uiState.showPreferences}
    onClose={() => $uiState.showPreferences = false}
  />
  
  
</div>


<style>
  @import "./App.css";
</style>
